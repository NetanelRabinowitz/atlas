package atlas

import cats.MonadError
import cats.syntax.all._
import scala.util.control.NonFatal

trait NativeBoilerplate {
  [#def native[F[_], [#A1#], R](func: ([#A1#]) => R)(
    implicit
    monad: MonadError[F, RuntimeError],
    [#argDec1: ValueDecoder[F, A1]#,
    ],
    resEnc: ValueEncoder[F, R]
  ): Native[F] =
    Native { values =>
      for {
        [#arg1 <- argDec1(values(0))#
        ]
        ans <- try {
                 func([#arg1#]).pure[F]
               } catch {
                 case NonFatal(exn) =>
                   RuntimeError("Error running native function", Some(exn)).raiseError[F, R]
               }
      } yield resEnc(ans)
    }#

  ]

  [#def nativeF[F[_], [#A1#], R](func: ([#A1#]) => F[R])(
    implicit
    monad: MonadError[F, RuntimeError],
    [#argDec1: ValueDecoder[F, A1]#,
    ],
    resEnc: ValueEncoder[F, R]
  ): Native[F] =
    Native { values =>
      for {
        [#arg1 <- argDec1(values(0))#
        ]
        ans <- func([#arg1#])
      } yield resEnc(ans)
    }#

  ]
}
