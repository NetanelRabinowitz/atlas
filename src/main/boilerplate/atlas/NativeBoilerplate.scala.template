package atlas

import cats.MonadError
import cats.syntax.all._
import scala.util.control.NonFatal

abstract class NativeBoilerplate[F[_]](implicit monadError: MonadError[F, RuntimeError]) {
  [#def wrap[[#A1#], R](func: ([#A1#]) => R)(
    implicit
    [#argDec1: ValueDecoder[A1]#,
    ],
    resEnc: ValueEncoder[R]
  ): NativeFunc[F] =
    NativeFunc { values =>
      for {
        [#arg1 <- monadError.fromEither(argDec1(values(0)))#
        ]
        ans <- tryCatch(func([#arg1#]))
      } yield resEnc(ans)
    }#

  ]

  private def tryCatch[A](body: => A): F[A] =
    try {
      body.pure[F]
    } catch {
      case NonFatal(exn) =>
        RuntimeError("Error running native function", Some(exn)).raiseError[F, A]
    }
}
