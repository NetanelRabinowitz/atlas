package atlas

import cats.MonadError
import cats.syntax.all._

trait ValueDecoderBoilerplate {
  self: ValueDecoderFunctions =>

  [#implicit def function1[F[_], [#A1#], R](
    implicit
    monad: MonadError[F, RuntimeError],
    interpreter: Interpreter[F],
    [#enc1: ValueEncoder[F, A1]#],
    dec: ValueDecoder[F, R],
  ): ValueDecoder[F, ([#A1#]) => interpreter.Step[R]] = {
    pure {
      case closure: Closure[F] =>
        monad.pure { ([#arg1: A1#]) =>
          val args = List([#enc1(arg1)#])
          for {
            res <- interpreter.applyClosure(closure, args)
            ans <- interpreter.pureF(dec(res))
          } yield ans
        }

      case native: Native[F] =>
        monad.pure { ([#arg1: A1#]) =>
          val args = List([#enc1(arg1)#])
          for {
            res <- interpreter.applyNative(native, args)
            ans <- interpreter.pureF(dec(res))
          } yield ans
        }

      case value =>
        RuntimeError(s"Could not decode value as function: $value").raiseError
    }
  }#

  ]
}
