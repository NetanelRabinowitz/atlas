package atlas

import cats.MonadError
import cats.syntax.all._

trait ValueDecoderBoilerplate {
  self: ValueDecoderFunctions =>

  [#implicit def function1[F[_], [#A1#], R](
    implicit
    monadError: MonadError[F, RuntimeError],
    interpreter: Interpreter[F],
    [#enc1: ValueEncoder[A1]#],
    dec: ValueDecoder[R],
  ): ValueDecoder[([#A1#]) => F[R]] = {
    pure {
      case closure: Closure =>
        Right { ([#arg1: A1#]) =>
          val args = List([#enc1(arg1)#])
          interpreter.applyClosure(closure, args).flatMap { value =>
            interpreter.pureEither(dec(value))
          }
        }

      case native: Native =>
        Right { ([#arg1: A1#]) =>
          val args = List([#enc1(arg1)#])
          interpreter.applyNative(native, args).flatMap { value =>
            interpreter.pureEither(dec(value))
          }
        }

      case value =>
        Left(RuntimeError(s"Could not decode function: $value"))
    }
  }#

  ]
}
