package atlas

import cats.MonadError
import cats.syntax.all._
import scala.util.control.NonFatal

trait ValueEncoderBoilerplate {
  self: ValueEncoderFunctions =>

  [#implicit def function1[F[_], [#A1#], R](
    implicit
    monadError: MonadError[F, RuntimeError],
    interpreter: Interpreter[F],
    [#argDec1: ValueDecoder[F, A1]#,
    ],
    resEnc: ValueEncoder[F, R]
  ): ValueEncoder[F, ([#A1#]) => F[R]] =
    pure { func =>
      Native {
        case [#v1# :: ] :: Nil =>
          for {
            [#a1 <- argDec1(v1)#
            ]
            r <- func([#a1#])
          } yield resEnc(r)

        case args =>
          RuntimeError(s"Native function cannot be applied to ${args.length} args").raiseError[F, Value[F]]
      }
    }#

  ]

  private def tryCatch[F[_], A](body: => A)(implicit monad: MonadError[F, RuntimeError]): F[A] =
    try {
      body.pure[F]
    } catch {
      case NonFatal(exn) =>
        RuntimeError("Error running native function", Some(exn)).raiseError[F, A]
    }
}
